let alphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я']; //стандартный алфавит
// let alphabetExtended = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я', 'А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ь', 'Ы', 'Ъ', 'Э', 'Ю', 'Я', ' ', '\n', '.', ',', '?', '!', '(', ')', ':', '-']; //расширенный алфавит

let alphabetStandard = [];
let currentCipher = "atbash"; // по умолчанию текущий шифр - атбаш
let typeOperation;

let matrixKeyLen = 4;
// let polybiusMatrix = [['а', 'б', 'в', 'г', 'д', 'е'], ['ж', 'з', 'и', 'й', 'к', 'л'], ['м', 'н', 'о', 'п', 'р', 'с'], ['т', 'у', 'ф', 'х', 'ц', 'ч'], ['ш', 'щ', 'ъ', 'ы', 'ь', 'э'], ['ю', 'я']];

// let polybiusMatrix = alphabet = [['а', 'б', 'в', 'г', 'д', 'е'], ['ё', 'ж', 'з', 'и', 'й', 'к'], ['л', 'м', 'н', 'о', 'п', 'р'], ['с', 'т', 'у', 'ф', 'х', 'ц'], ['ч', 'ш', 'щ', 'ъ', 'ы', 'ь'], ['э', 'ю', 'я', 'А', 'Б', 'В'], ['Г', 'Д', 'Е', 'Ё', 'Ж', 'З'], ['И', 'Й', 'К', 'Л', 'М', 'Н'], ['О', 'П', 'Р', 'С', 'Т', 'У'], ['Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ'], ['Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я'], ['.', ',', '-', '!', '?', ':'], [';', '—', '/', ' ', '0', '1'], ['2', '3', '4', '5', '6', '7'], ['8', '9', 'a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h', 'i', 'j'], ['k', 'l', 'm', 'n', 'o', 'p'], ['q', 'r', 's', 't', 'u', 'v'], ['w', 'x', 'y', 'z', 'A', 'B'], ['C', 'D', 'E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L', 'M', 'N'], ['O', 'P', 'Q', 'R', 'S', 'T'], ['U', 'V', 'W', 'X', 'Y', 'Z']];

// кузнечик
let P = [252, 238, 221, 17, 207, 110, 49, 22, 251, 196, 250, 218, 35, 197, 4, 77, 233, 119, 240, 219, 147, 46,
    153, 186, 23, 54, 241, 187, 20, 205, 95, 193, 249, 24, 101, 90, 226, 92, 239, 33, 129, 28, 60, 66, 139, 1, 142,
    79, 5, 132, 2, 174, 227, 106, 143, 160, 6, 11, 237, 152, 127, 212, 211, 31, 235, 52, 44, 81, 234, 200, 72, 171,
    242, 42, 104, 162, 253, 58, 206, 204, 181, 112, 14, 86, 8, 12, 118, 18, 191, 114, 19, 71, 156, 183, 93, 135, 21,
    161, 150, 41, 16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177, 50, 117, 25, 61, 255, 53, 138, 126,
    109, 84, 198, 128, 195, 189, 13, 87, 223, 245, 36, 169, 62, 168, 67, 201, 215, 121, 214, 246, 124, 34, 185, 3,
    224, 15, 236, 222, 122, 148, 176, 188, 220, 232, 40, 80, 78, 51, 10, 74, 167, 151, 96, 115, 30, 0, 98, 68, 26,
    184, 56, 130, 100, 159, 38, 65, 173, 69, 70, 146, 39, 94, 85, 47, 140, 163, 165, 125, 105, 213, 149, 59, 7, 88,
    179, 64, 134, 172, 29, 247, 48, 55, 107, 228, 136, 217, 231, 137, 225, 27, 131, 73, 76, 63, 248, 254, 141, 83,
    170, 144, 202, 216, 133, 97, 32, 113, 103, 164, 45, 43, 9, 91, 203, 155, 37, 208, 190, 229, 108, 82, 89, 166,
    116, 210, 230, 244, 180, 192, 209, 102, 175, 194, 57, 75, 99, 182];

let invP = ['a5', '2d', '32', '8f', '0e', '30', '38', 'c0', '54', 'e6', '9e', '39', '55', '7e', '52', '91',
    '64', '03', '57', '5a', '1c', '60', '07', '18', '21', '72', 'a8', 'd1', '29', 'c6', 'a4', '3f',
    'e0', '27', '8d', '0c', '82', 'ea', 'ae', 'b4', '9a', '63', '49', 'e5', '42', 'e4', '15', 'b7',
    'c8', '06', '70', '9d', '41', '75', '19', 'c9', 'aa', 'fc', '4d', 'bf', '2a', '73', '84', 'd5',
    'c3', 'af', '2b', '86', 'a7', 'b1', 'b2', '5b', '46', 'd3', '9f', 'fd', 'd4', '0f', '9c', '2f',
    '9b', '43', 'ef', 'd9', '79', 'b6', '53', '7f', 'c1', 'f0', '23', 'e7', '25', '5e', 'b5', '1e',
    'a2', 'df', 'a6', 'fe', 'ac', '22', 'f9', 'e2', '4a', 'bc', '35', 'ca', 'ee', '78', '05', '6b',
    '51', 'e1', '59', 'a3', 'f2', '71', '56', '11', '6a', '89', '94', '65', '8c', 'bb', '77', '3c',
    '7b', '28', 'ab', 'd2', '31', 'de', 'c4', '5f', 'cc', 'cf', '76', '2c', 'b8', 'd8', '2e', '36',
    'db', '69', 'b3', '14', '95', 'be', '62', 'a1', '3b', '16', '66', 'e9', '5c', '6c', '6d', 'ad',
    '37', '61', '4b', 'b9', 'e3', 'ba', 'f1', 'a0', '85', '83', 'da', '47', 'c5', 'b0', '33', 'fa',
    '96', '6f', '6e', 'c2', 'f6', '50', 'ff', '5d', 'a9', '8e', '17', '1b', '97', '7d', 'ec', '58',
    'f7', '1f', 'fb', '7c', '09', '0d', '7a', '67', '45', '87', 'dc', 'e8', '4f', '1d', '4e', '04',
    'eb', 'f8', 'f3', '3e', '3d', 'bd', '8a', '88', 'dd', 'cd', '0b', '13', '98', '02', '93', '80',
    '90', 'd0', '24', '34', 'cb', 'ed', 'f4', 'ce', '99', '10', '44', '40', '92', '3a', '01', '26',
    '12', '1a', '48', '68', 'f5', '81', '8b', 'c7', 'd6', '20', '0a', '08', '00', '4c', 'd7', '74'];

let L_vector = [148, 32, 133, 16, 194, 192, 1, 251, 1, 192, 194, 16, 133, 32, 148, 1];

// aes
let sBox = [["63", "7c", "77", "7b", "f2", "6b", "6f", "c5", "30", "01", "67", "2b", "fe", "d7", "ab", "76"],
    ["ca", "82", "c9", "7d", "fa", "59", "47", "f0", "ad", "d4", "a2", "af", "9c", "a4", "72", "c0"],
    ["b7", "fd", "93", "26", "36", "3f", "f7", "cc", "34", "a5", "e5", "f1", "71", "d8", "31", "15"],
    ["04", "c7", "23", "c3", "18", "96", "05", "9a", "07", "12", "80", "e2", "eb", "27", "b2", "75"],
    ["09", "83", "2c", "1a", "1b", "6e", "5a", "a0", "52", "3b", "d6", "b3", "29", "e3", "2f", "84"],
    ["53", "d1", "00", "ed", "20", "fc", "b1", "5b", "6a", "cb", "be", "39", "4a", "4c", "58", "cf"],
    ["d0", "ef", "aa", "fb", "43", "4d", "33", "85", "45", "f9", "02", "7f", "50", "3c", "9f", "a8"],
    ["51", "a3", "40", "8f", "92", "9d", "38", "f5", "bc", "b6", "da", "21", "10", "ff", "f3", "d2"],
    ["cd", "0c", "13", "ec", "5f", "97", "44", "17", "c4", "a7", "7e", "3d", "64", "5d", "19", "73"],
    ["60", "81", "4f", "dc", "22", "2a", "90", "88", "46", "ee", "b8", "14", "de", "5e", "0b", "db"],
    ["e0", "32", "3a", "0a", "49", "06", "24", "5c", "c2", "d3", "ac", "62", "91", "95", "e4", "79"],
    ["e7", "c8", "37", "6d", "8d", "d5", "4e", "a9", "6c", "56", "f4", "ea", "65", "7a", "ae", "08"],
    ["ba", "78", "25", "2e", "1c", "a6", "b4", "c6", "e8", "dd", "74", "1f", "4b", "bd", "8b", "8a"],
    ["70", "3e", "b5", "66", "48", "03", "f6", "0e", "61", "35", "57", "b9", "86", "c1", "1d", "9e"],
    ["e1", "f8", "98", "11", "69", "d9", "8e", "94", "9b", "1e", "87", "e9", "ce", "55", "28", "df"],
    ["8c", "a1", "89", "0d", "bf", "e6", "42", "68", "41", "99", "2d", "0f", "b0", "54", "bb", "16"]];

let inverseSBox = [["52", "09", "6a", "d5", "30", "36", "a5", "38", "bf", "40", "a3", "9e", "81", "f3", "d7", "fb"],
    ["7c", "e3", "39", "82", "9b", "2f", "ff", "87", "34", "8e", "43", "44", "c4", "de", "e9", "cb"],
    ["54", "7b", "94", "32", "a6", "c2", "23", "3d", "ee", "4c", "95", "0b", "42", "fa", "c3", "4e"],
    ["08", "2e", "a1", "66", "28", "d9", "24", "b2", "76", "5b", "a2", "49", "6d", "8b", "d1", "25"],
    ["72", "f8", "f6", "64", "86", "68", "98", "16", "d4", "a4", "5c", "cc", "5d", "65", "b6", "92"],
    ["6c", "70", "48", "50", "fd", "ed", "b9", "da", "5e", "15", "46", "57", "a7", "8d", "9d", "84"],
    ["90", "d8", "ab", "00", "8c", "bc", "d3", "0a", "f7", "e4", "58", "05", "b8", "b3", "45", "06"],
    ["d0", "2c", "1e", "8f", "ca", "3f", "0f", "02", "c1", "af", "bd", "03", "01", "13", "8a", "6b"],
    ["3a", "91", "11", "41", "4f", "67", "dc", "ea", "97", "f2", "cf", "ce", "f0", "b4", "e6", "73"],
    ["96", "ac", "74", "22", "e7", "ad", "35", "85", "e2", "f9", "37", "e8", "1c", "75", "df", "6e"],
    ["47", "f1", "1a", "71", "1d", "29", "c5", "89", "6f", "b7", "62", "0e", "aa", "18", "be", "1b"],
    ["fc", "56", "3e", "4b", "c6", "d2", "79", "20", "9a", "db", "c0", "fe", "78", "cd", "5a", "f4"],
    ["1f", "dd", "a8", "33", "88", "07", "c7", "31", "b1", "12", "10", "59", "27", "80", "ec", "5f"],
    ["60", "51", "7f", "a9", "19", "b5", "4a", "0d", "2d", "e5", "7a", "9f", "93", "c9", "9c", "ef"],
    ["a0", "e0", "3b", "4d", "ae", "2a", "f5", "b0", "c8", "eb", "bb", "3c", "83", "53", "99", "61"],
    ["17", "2b", "04", "7e", "ba", "77", "d6", "26", "e1", "69", "14", "63", "55", "21", "0c", "7d"]];

let Rcon = ["01000000", "02000000", "04000000", "08000000", "10000000", "20000000", "40000000", "80000000", "1b000000",
    "36000000"];

let multiply_by_9 = [['00', '09', '12', '1b', '24', '2d', '36', '3f', '48', '41', '5a', '53', '6c', '65', '7e', '77'],
    ['90', '99', '82', '8b', 'b4', 'bd', 'a6', 'af', 'd8', 'd1', 'ca', 'c3', 'fc', 'f5', 'ee', 'e7'],
    ['3b', '32', '29', '20', '1f', '16', '0d', '04', '73', '7a', '61', '68', '57', '5e', '45', '4c'],
    ['ab', 'a2', 'b9', 'b0', '8f', '86', '9d', '94', 'e3', 'ea', 'f1', 'f8', 'c7', 'ce', 'd5', 'dc'],
    ['76', '7f', '64', '6d', '52', '5b', '40', '49', '3e', '37', '2c', '25', '1a', '13', '08', '01'],
    ['e6', 'ef', 'f4', 'fd', 'c2', 'cb', 'd0', 'd9', 'ae', 'a7', 'bc', 'b5', '8a', '83', '98', '91'],
    ['4d', '44', '5f', '56', '69', '60', '7b', '72', '05', '0c', '17', '1e', '21', '28', '33', '3a'],
    ['dd', 'd4', 'cf', 'c6', 'f9', 'f0', 'eb', 'e2', '95', '9c', '87', '8e', 'b1', 'b8', 'a3', 'aa'],
    ['ec', 'e5', 'fe', 'f7', 'c8', 'c1', 'da', 'd3', 'a4', 'ad', 'b6', 'bf', '80', '89', '92', '9b'],
    ['7c', '75', '6e', '67', '58', '51', '4a', '43', '34', '3d', '26', '2f', '10', '19', '02', '0b'],
    ['d7', 'de', 'c5', 'cc', 'f3', 'fa', 'e1', 'e8', '9f', '96', '8d', '84', 'bb', 'b2', 'a9', 'a0'],
    ['47', '4e', '55', '5c', '63', '6a', '71', '78', '0f', '06', '1d', '14', '2b', '22', '39', '30'],
    ['9a', '93', '88', '81', 'be', 'b7', 'ac', 'a5', 'd2', 'db', 'c0', 'c9', 'f6', 'ff', 'e4', 'ed'],
    ['0a', '03', '18', '11', '2e', '27', '3c', '35', '42', '4b', '50', '59', '66', '6f', '74', '7d'],
    ['a1', 'a8', 'b3', 'ba', '85', '8c', '97', '9e', 'e9', 'e0', 'fb', 'f2', 'cd', 'c4', 'df', 'd6'],
    ['31', '38', '23', '2a', '15', '1c', '07', '0e', '79', '70', '6b', '62', '5d', '54', '4f', '46']];

let multiply_by_11 = [['00', '0b', '16', '1d', '2c', '27', '3a', '31', '58', '53', '4e', '45', '74', '7f', '62', '69'],
    ['b0', 'bb', 'a6', 'ad', '9c', '97', '8a', '81', 'e8', 'e3', 'fe', 'f5', 'c4', 'cf', 'd2', 'd9'],
    ['7b', '70', '6d', '66', '57', '5c', '41', '4a', '23', '28', '35', '3e', '0f', '04', '19', '12'],
    ['cb', 'c0', 'dd', 'd6', 'e7', 'ec', 'f1', 'fa', '93', '98', '85', '8e', 'bf', 'b4', 'a9', 'a2'],
    ['f6', 'fd', 'e0', 'eb', 'da', 'd1', 'cc', 'c7', 'ae', 'a5', 'b8', 'b3', '82', '89', '94', '9f'],
    ['46', '4d', '50', '5b', '6a', '61', '7c', '77', '1e', '15', '08', '03', '32', '39', '24', '2f'],
    ['8d', '86', '9b', '90', 'a1', 'aa', 'b7', 'bc', 'd5', 'de', 'c3', 'c8', 'f9', 'f2', 'ef', 'e4'],
    ['3d', '36', '2b', '20', '11', '1a', '07', '0c', '65', '6e', '73', '78', '49', '42', '5f', '54'],
    ['f7', 'fc', 'e1', 'ea', 'db', 'd0', 'cd', 'c6', 'af', 'a4', 'b9', 'b2', '83', '88', '95', '9e'],
    ['47', '4c', '51', '5a', '6b', '60', '7d', '76', '1f', '14', '09', '02', '33', '38', '25', '2e'],
    ['8c', '87', '9a', '91', 'a0', 'ab', 'b6', 'bd', 'd4', 'df', 'c2', 'c9', 'f8', 'f3', 'ee', 'e5'],
    ['3c', '37', '2a', '21', '10', '1b', '06', '0d', '64', '6f', '72', '79', '48', '43', '5e', '55'],
    ['01', '0a', '17', '1c', '2d', '26', '3b', '30', '59', '52', '4f', '44', '75', '7e', '63', '68'],
    ['b1', 'ba', 'a7', 'ac', '9d', '96', '8b', '80', 'e9', 'e2', 'ff', 'f4', 'c5', 'ce', 'd3', 'd8'],
    ['7a', '71', '6c', '67', '56', '5d', '40', '4b', '22', '29', '34', '3f', '0e', '05', '18', '13'],
    ['ca', 'c1', 'dc', 'd7', 'e6', 'ed', 'f0', 'fb', '92', '99', '84', '8f', 'be', 'b5', 'a8', 'a3']];

let multiply_by_13 = [['00', '0d', '1a', '17', '34', '39', '2e', '23', '68', '65', '72', '7f', '5c', '51', '46', '4b'],
    ['d0', 'dd', 'ca', 'c7', 'e4', 'e9', 'fe', 'f3', 'b8', 'b5', 'a2', 'af', '8c', '81', '96', '9b'],
    ['bb', 'b6', 'a1', 'ac', '8f', '82', '95', '98', 'd3', 'de', 'c9', 'c4', 'e7', 'ea', 'fd', 'f0'],
    ['6b', '66', '71', '7c', '5f', '52', '45', '48', '03', '0e', '19', '14', '37', '3a', '2d', '20'],
    ['6d', '60', '77', '7a', '59', '54', '43', '4e', '05', '08', '1f', '12', '31', '3c', '2b', '26'],
    ['bd', 'b0', 'a7', 'aa', '89', '84', '93', '9e', 'd5', 'd8', 'cf', 'c2', 'e1', 'ec', 'fb', 'f6'],
    ['d6', 'db', 'cc', 'c1', 'e2', 'ef', 'f8', 'f5', 'be', 'b3', 'a4', 'a9', '8a', '87', '90', '9d'],
    ['06', '0b', '1c', '11', '32', '3f', '28', '25', '6e', '63', '74', '79', '5a', '57', '40', '4d'],
    ['da', 'd7', 'c0', 'cd', 'ee', 'e3', 'f4', 'f9', 'b2', 'bf', 'a8', 'a5', '86', '8b', '9c', '91'],
    ['0a', '07', '10', '1d', '3e', '33', '24', '29', '62', '6f', '78', '75', '56', '5b', '4c', '41'],
    ['61', '6c', '7b', '76', '55', '58', '4f', '42', '09', '04', '13', '1e', '3d', '30', '27', '2a'],
    ['b1', 'bc', 'ab', 'a6', '85', '88', '9f', '92', 'd9', 'd4', 'c3', 'ce', 'ed', 'e0', 'f7', 'fa'],
    ['b7', 'ba', 'ad', 'a0', '83', '8e', '99', '94', 'df', 'd2', 'c5', 'c8', 'eb', 'e6', 'f1', 'fc'],
    ['67', '6a', '7d', '70', '53', '5e', '49', '44', '0f', '02', '15', '18', '3b', '36', '21', '2c'],
    ['0c', '01', '16', '1b', '38', '35', '22', '2f', '64', '69', '7e', '73', '50', '5d', '4a', '47'],
    ['dc', 'd1', 'c6', 'cb', 'e8', 'e5', 'f2', 'ff', 'b4', 'b9', 'ae', 'a3', '80', '8d', '9a', '97']];

let multiply_by_14 = [['00', '0e', '1c', '12', '38', '36', '24', '2a', '70', '7e', '6c', '62', '48', '46', '54', '5a'],
    ['e0', 'ee', 'fc', 'f2', 'd8', 'd6', 'c4', 'ca', '90', '9e', '8c', '82', 'a8', 'a6', 'b4', 'ba'],
    ['db', 'd5', 'c7', 'c9', 'e3', 'ed', 'ff', 'f1', 'ab', 'a5', 'b7', 'b9', '93', '9d', '8f', '81'],
    ['3b', '35', '27', '29', '03', '0d', '1f', '11', '4b', '45', '57', '59', '73', '7d', '6f', '61'],
    ['ad', 'a3', 'b1', 'bf', '95', '9b', '89', '87', 'dd', 'd3', 'c1', 'cf', 'e5', 'eb', 'f9', 'f7'],
    ['4d', '43', '51', '5f', '75', '7b', '69', '67', '3d', '33', '21', '2f', '05', '0b', '19', '17'],
    ['76', '78', '6a', '64', '4e', '40', '52', '5c', '06', '08', '1a', '14', '3e', '30', '22', '2c'],
    ['96', '98', '8a', '84', 'ae', 'a0', 'b2', 'bc', 'e6', 'e8', 'fa', 'f4', 'de', 'd0', 'c2', 'cc'],
    ['41', '4f', '5d', '53', '79', '77', '65', '6b', '31', '3f', '2d', '23', '09', '07', '15', '1b'],
    ['a1', 'af', 'bd', 'b3', '99', '97', '85', '8b', 'd1', 'df', 'cd', 'c3', 'e9', 'e7', 'f5', 'fb'],
    ['9a', '94', '86', '88', 'a2', 'ac', 'be', 'b0', 'ea', 'e4', 'f6', 'f8', 'd2', 'dc', 'ce', 'c0'],
    ['7a', '74', '66', '68', '42', '4c', '5e', '50', '0a', '04', '16', '18', '32', '3c', '2e', '20'],
    ['ec', 'e2', 'f0', 'fe', 'd4', 'da', 'c8', 'c6', '9c', '92', '80', '8e', 'a4', 'aa', 'b8', 'b6'],
    ['0c', '02', '10', '1e', '34', '3a', '28', '26', '7c', '72', '60', '6e', '44', '4a', '58', '56'],
    ['37', '39', '2b', '25', '0f', '01', '13', '1d', '47', '49', '5b', '55', '7f', '71', '63', '6d'],
    ['d7', 'd9', 'cb', 'c5', 'ef', 'e1', 'f3', 'fd', 'a7', 'a9', 'bb', 'b5', '9f', '91', '83', '8d']];

let Nk = 4;


let polybiusMatrix = [['а', 'б', 'в', 'г', 'д', 'е', 'ё'], ['ж', 'з', 'и', 'й', 'к', 'л', 'м'], ['н', 'о', 'п', 'р', 'с', 'т', 'у'], ['ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ'], ['ы', 'ь', 'э', 'ю', 'я', 'А', 'Б'], ['В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З'], ['И', 'Й', 'К', 'Л', 'М', 'Н', 'О'], ['П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х'], ['Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь'], ['Э', 'Ю', 'Я', '.', ',', '-', '!'], ['?', ':', ';', '—', '/', ' ', '0'], ['1', '2', '3', '4', '5', '6', '7'], ['8', '9', 'a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k', 'l'], ['m', 'n', 'o', 'p', 'q', 'r', 's'], ['t', 'u', 'v', 'w', 'x', 'y', 'z'], ['A', 'B', 'C', 'D', 'E', 'F', 'G'], ['H', 'I', 'J', 'K', 'L', 'M', 'N'], ['O', 'P', 'Q', 'R', 'S', 'T', 'U'], ['V', 'W', 'X', 'Y', 'Z']];


let matrixNum = [[]];


let alphabet16 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"];

let blocksMagma = [
    {'0': 'C', '1': '4', '2': '6', '3': '2', '4': 'A', '5': '5', '6': 'B', '7': '9', '8': 'E', '9': '8', 'A': 'D', 'B': '7', 'C': '0', 'D': '3', 'E': 'F', 'F': '1'},
    {'0': '6', '1': '8', '2': '2', '3': '3', '4': '9', '5': 'A', '6': '5', '7': 'C', '8': '1', '9': 'E', 'A': '4', 'B': '7', 'C': 'B', 'D': 'D', 'E': '0', 'F': 'F'},
    {'0': 'B', '1': '3', '2': '5', '3': '8', '4': '2', '5': 'F', '6': 'A', '7': 'D', '8': 'E', '9': '1', 'A': '7', 'B': '4', 'C': 'C', 'D': '9', 'E': '6', 'F': '0'},
    {'0': 'C', '1': '8', '2': '2', '3': '1', '4': 'D', '5': '4', '6': 'F', '7': '6', '8': '7', '9': '0', 'A': 'A', 'B': '5', 'C': '3', 'D': 'E', 'E': '9', 'F': 'B'},
    {'0': '7', '1': 'F', '2': '5', '3': 'A', '4': '8', '5': '1', '6': '6', '7': 'D', '8': '0', '9': '9', 'A': '3', 'B': 'E', 'C': 'B', 'D': '4', 'E': '2', 'F': 'C'},
    {'0': '5', '1': 'D', '2': 'F', '3': '6', '4': '9', '5': '2', '6': 'C', '7': 'A', '8': 'B', '9': '7', 'A': '8', 'B': '1', 'C': '4', 'D': '3', 'E': 'E', 'F': '0'},
    {'0': '8', '1': 'E', '2': '2', '3': '5', '4': '6', '5': '9', '6': '1', '7': 'C', '8': 'F', '9': '4', 'A': 'B', 'B': '0', 'C': 'D', 'D': 'A', 'E': '3', 'F': '7'},
    {'0': '1', '1': '7', '2': 'E', '3': 'D', '4': '0', '5': '5', '6': '8', '7': '3', '8': '4', '9': 'F', 'A': 'A', 'B': '6', 'C': '9', 'D': 'C', 'E': 'B', 'F': '2'}
    ];

let blocksMagmaS = [
    {'0': 'C', '1': '4', '2': '6', '3': '2', '4': 'A', '5': '5', '6': 'B', '7': '9', '8': 'E', '9': '8', 'A': 'D', 'B': '7', 'C': '0', 'D': '3', 'E': 'F', 'F': '1'},
    {'0': '6', '1': '8', '2': '2', '3': '3', '4': '9', '5': 'A', '6': '5', '7': 'C', '8': '1', '9': 'E', 'A': '4', 'B': '7', 'C': 'B', 'D': 'D', 'E': '0', 'F': 'F'},
    {'0': 'B', '1': '3', '2': '5', '3': '8', '4': '2', '5': 'F', '6': 'A', '7': 'D', '8': 'E', '9': '1', 'A': '7', 'B': '4', 'C': 'C', 'D': '9', 'E': '6', 'F': '0'},
    {'0': 'C', '1': '8', '2': '2', '3': '1', '4': 'D', '5': '4', '6': 'F', '7': '6', '8': '7', '9': '0', 'A': 'A', 'B': '5', 'C': '3', 'D': 'E', 'E': '9', 'F': 'B'},
    {'0': '7', '1': 'F', '2': '5', '3': 'A', '4': '8', '5': '1', '6': '6', '7': 'D', '8': '0', '9': '9', 'A': '3', 'B': 'E', 'C': 'B', 'D': '4', 'E': '2', 'F': 'C'},
    {'0': '5', '1': 'D', '2': 'F', '3': '6', '4': '9', '5': '2', '6': 'C', '7': 'A', '8': 'B', '9': '7', 'A': '8', 'B': '1', 'C': '4', 'D': '3', 'E': 'E', 'F': '0'},
    {'0': '8', '1': 'E', '2': '2', '3': '5', '4': '6', '5': '9', '6': '1', '7': 'C', '8': 'F', '9': '4', 'A': 'B', 'B': '0', 'C': 'D', 'D': 'A', 'E': '3', 'F': '7'},
    {'0': '1', '1': '7', '2': 'E', '3': 'D', '4': '0', '5': '5', '6': '8', '7': '3', '8': '4', '9': 'F', 'A': 'A', 'B': '6', 'C': '9', 'D': 'C', 'E': 'B', 'F': '2'}
];

change(blocksMagmaS); // сразу меняем 16 значения в таблице на двоичные

let N5 = "00000001000000010000000100000001";
let N6 = "00000001000000010000000100000100";


//let alphabetSquare = [["", "", "", "", "", ""], ["", "", "", "", "", ""], ["", "", "", "", "", ""], ["", "", "", "", "", ""], ["", "", "", "", "", ""]];
let alphabetSquare


let cardanoKey = [1, 10, 14, 16, 17, 21, 25, 29, 33, 37, 41, 52, 55, 56, 59];


function change(_blocks) {  // меняем 16 ричный код на двоичный в таблице
    for (let blockNumber = 0; blockNumber < _blocks.length; blockNumber++) {
        alphabet16.forEach(function(_symbol) {
            _blocks[blockNumber][_symbol] = from16To2(_blocks[blockNumber][_symbol]);

            _blocks[blockNumber][from16To2(_symbol)] = _blocks[blockNumber][_symbol];

            delete _blocks[blockNumber][_symbol];
        });
    }
}

function from16To2(_symbol) {
    let num10 = parseInt(_symbol, 16);
    let num2 = (num10).toString(2);

    num2 = num2.padStart(4, "0");
    return num2;
}

// A5
let R1_polynomials = [14, 17, 18, 19];
let R2_polynomials = [21, 22];
let R3_polynomials = [8, 21, 22, 23];
let R4_polynomials = [12, 17];

let R1_len = 19;
let R2_len = 22;
let R3_len = 23;
let R4_len = 17;

let R1_majorityBits = {"x": 12, "y": 14, "z": 15};
let R2_majorityBits = {"x": 9, "y": 13, "z": 16};
let R3_majorityBits = {"x": 13, "y": 16, "z": 18};









let descriptionArray = { // где какие поля отображать
    atbash: "АТБАШ — простой шифр подстановки для алфавитного письма. Шифр АТБАШ можно также рассматривать как частный случай аффинного шифра. Слово составлено из первой, последней, второй и предпоследней букв еврейского алфавита. На вход подается текст, шифрование которого заключается в замене i-й буквы алфавита буквой с номером n-i+1, где n — число символов в алфавите.",
    caesar: "Шифр Цезаря, также известный как шифр сдвига, код Цезаря или сдвиг Цезаря — один из самых простых и наиболее широко известных методов шифрования. Шифр Цезаря — это вид шифра подстановки, в котором каждый символ в открытом тексте заменяется символом, находящимся на некотором постоянном числе позиций левее или правее него в алфавите. На вход подаются ключ и текст, каждый символ в котором сдвигается на определенное ключом число позиций.",
    polybius_square: "Шифр замены, называемый Квадратом Полибия, был изобретен во 2 веке до нашей эры, он использовался для предупреждения об опасности с помощью двух факелов с охранных постов. На вход подается текст, каждый символ в котором индексируется согласно его позиции в квадрате.",
    trythemia: "В Германии XV-XVI веках значительный вклад в криптографию внёс Иоганнес Тритемий, аббат монастыря в городе Вюрцбург, находившийся под личным покровительством императора Максимилиана I, написал в 1499г. и издал в 1518г. книгу «Полиграфия» — первую печатную книгу по криптографии. По алгоритму шифрования, каждый символ сообщения смещается на символ, отстающий от данного на некоторый шаг. На вход подается текст, шифрование каждого символа которого заключается в замене его на символ с индексом, равным сумме текущего индекса и номера строки таблицы, по которой происходит смещение, по модулю длины алфавита.",
    belazo: "Джованни Батиста Белазо в 1553 году предложил использовать для многоалфавитного шифра буквенный, легко запоминаемый ключ, который он назвал паролем. Шифрование осуществляется с помощью пароля-ключа, состоящего из М символов. Из полной таблицы Тритемия выделяется матрица ТШ размерностью [(М+1) х R]. Она включает первую строку и строки, первые элементы которых совпадают с символами ключа. На вход подаются ключ и текст, шифрование каждого символа которого заключается в замене его на символ с индексом, равным сумме текущего индекса и номера строки таблицы, по которой происходит смещение, по модулю длины алфавита. Первым символом в строках таблицы является символ из ключа, после которого записываются идущие после этого символа буквы алфавита.",
    vigenere: "В книге \"Трактат о шифрах\" Блез де Виженер описал два шифра, работающих по принципу шифра Белазо (см. выше), но в качестве пароля используется сам шифруемый текст с добавленной перед ним секретной буквой. На вход подаются ключ и текст, которые представляют собой массив, в соответствии с которым производится замена символов исходного текста.",
    magma_s_blocks: "Используемый набор подстановок был выбран исходя из обеспечения наилучших характеристик, определяющих невозможность применения дифференциального и линейного методов криптографического анализа. Данный узел замен предлагался ТК 26 при международной стандартизации ГОСТ 28147-89 в составе стандарта шифрования ISO/IEC 18033-3 и рекомендовался отечественным разработчикам СКЗИ. Фиксированный набор подстановок позволит максимально упростить разработку взаимодействующих информационно-телекоммуникационных систем. На вход подается текст, символы которого индексируются, после чего строка разбивается на блоки по 4 символа, замена которых осуществляется по S_blocks. После чего происходит циклический сдвиг на 11 влево.",
    playfair: "Система шифрования Плейфера была изобретена Чарльзом Уитстоном, который впервые описал её в 1854 году. Лорд Лайон Плейфер, внес большой вклад в продвижение использования данной системы шифрования. Переход от биграмм входного текста к биграммам выходного текста осуществляется по следующим правилам: если буквы входной биграммы оказались в одном столбце таблицы, шифрование происходит сверху вниз; если же буквы входной биграммы оказались в одной строке таблицы, то шифрование осуществляется слева направо, а расшифрование — наоборот. Буквы биграмм могут совпадать. Если буквы входной биграммы оказались в разных столбцах и строках таблицы, то рисуется воображаемый прямоугольник, а выходная биграмма берется как его альтернативные вершины.", // "matrix-block"
    matrix: "На вход подается ключ (размерность и элементы матрицы) и текст. Шифрование k-ого блока исходной информации, представленного в виде вектора Bk = |bj|, осуществляется путем перемножения этого вектора на матрицу А = |aіј|, используемую в качестве ключа. В результате перемножения получается блок шифртекста в виде вектора Сk = |сі|.",
    cardano: "Для шифрования используется трафарет из прямоугольного листа клетчатой бумаги размером 2m x 2k клеток. В трафарете вырезано m x k клеток так, что при наложении его на чистый лист бумаги того же размера четырьмя возможными способами его вырезы полностью покрывают всю площадь листа. Буквы сообщения последовательно вписываются в вырезы трафарета (по строкам, в каждой строке слева направо) при каждом из четырех его возможных положений в заранее установленном порядке.",
    vertical: "Шифр перестановки — это метод симметричного шифрования, в котором элементы исходного открытого текста меняют местами. Элементами текста могут быть отдельные символы (самый распространённый случай), пары букв, тройки букв, комбинирование этих случаев и так далее. Типичными примерами перестановки являются анаграммы. В классической криптографии шифры перестановки можно разделить на два класса: Шифры одинарной (простой) перестановки — при шифровании символы открытого текста перемещаются с исходных позиций в новые один раз. Шифры множественной (сложной) перестановки — при шифровании символы открытого текста перемещаются с исходных позиций в новые несколько раз. Широкое распространение получила разновидность маршрутной перестановки — вертикальная перестановка. В этом шифре также используется прямоугольная таблица, в которую сообщение записывается по строкам слева направо. Выписывается шифрограмма по вертикалям, при этом столбцы выбираются в порядке, определяемом ключом.",
    shannon: "Подход Шеннона превратил криптографию из искусства в науку, так как появилась возможность доказывать защищенность информации при помощи шифра. Однако, объем ключа в совершенном шифре совпадает с объемом сообщения, что затрудняет выполнение условия секретности ключа. Индексы символов исходного сообщения складываются со значениями сгенерированной гаммы по модулю длины алфавита.",
    gamming: "Открытые данные, разбитые на 64-разрядные блоки T0(i) зашифровываются в режиме гаммирования путем поразрядного суммирования по модулю 2 в сумматоре СМ5 с гаммой шифра Гш(i), которая вырабатывается блоками по 64 бита. Число двоичных разрядов в блоке Т0(M), где М определяется объемом шифруемых данных может быть меньше 64, при этом неиспользованная для зашифрования часть гаммы шифра из блока Гш(M) отбрасывается. В ключевое запоминающее устройство (КЗУ) вводятся 256 бит ключа. В накопители N1, N2 вводится 64-разрядная двоичная последовательность (синхропосылка) S=(S1,S2,…,S64), являющаяся исходным заполнением этих накопителей для последующей выработки М блоков гаммы шифра. Синхропосылка вводится в N1 и N2 так, что значение S1 вводится в 1- ый разряд N1, значение S33 – в 1-ый разряд N2, S64 – в 32-й разряд N2. Исходное заполнение накопителей N1 и N2 (синхропосылка S) зашифровывается в режиме простой замены. Результат зашифрования A(S)=(Y0,Z0) переписывается в 32-разрядные накопители N3 и N4 так, что заполнение N1 переписывается в N3, а N2 - в N4. Заполнение накопителя N4 суммируется по модулю (232-1) в сумматоре СМ4 с 32- разрядной константой С1 из накопителя N6, результат записывается в N4. Заполнение накопителя N3 суммируется по модулю 232 в сумматоре СМ3 с 32- разрядной константой С2 из накопителя N5, результат записывается в N3. Заполнение N3 переписывается в N1, а заполнение N4 – в N2. При этом заполнение N3, N4 сохраняется. Заполнение N1 и N2 зашифровывается в режиме простой замены. Полученное в результате в N1, N2 зашифрование образует первый 64-рарядный блок гаммы шифра Гш(1), который суммируется в СМ5 с первым 64- разрядным блоком открытых данных Т0(1). В результате получается 64 – разрядный блок зашифрования данных Гш(1). Для получения следующего 64-разрядного блока гаммы шифра Гш(2) заполнение N4 суммируется по модулю (232-1) в СМ4. С константой С1 из N6, заполнение N3 суммируется по модулю 232 в сумматоре СМ3 с С2 (в N5). Новое заполнение N3 переписывается в N1, а новое заполнение N4 переписывается в N2., при этом заполнение N3, N4 сохраняется. Заполнение N1 и N2 зашифровывается в режиме простой замены. Полученное в результате зашифрования заполнение N1, N2 образует второй 64-разрядный блок гаммы шифра Гш(2), который поразрядно 110 суммируется по модулю 2 в СМ5 со вторым блоком открытых данных Т0(2). Аналогично вырабатываются блоки гаммы шифра Гш(3), … , Гш(М) и зашифровываются блоки открытых данных Т0(3), …, Т0(М).",
    A5_1: "Шифр основан на побитовом сложении по модулю два генерируемой псевдослучайной последовательности и шифруемой информации. В A5/1 псевдослучайная последовательность реализуется на основе трёх линейных регистров сдвига с обратной связью. Сдвигами управляет специальная схема, организующая на каждом шаге смещение как минимум двух регистров, что приводит к их неравномерному движению. Последовательность формируется путём операции «исключающее или» над выходными битами регистров.",
    A5_2: "Шифр основан на побитовом сложении по модулю два генерируемой псевдослучайной последовательности и шифруемой информации. В A5/2 псевдослучайная последовательность реализуется на основе четырех линейных регистров сдвига с обратной связью. Сдвигами управляет специальная схема, организующая на каждом шаге смещение как минимум двух регистров, что приводит к их неравномерному движению. Последовательность формируется путём операции «исключающее или» над выходными битами регистров.",
    magma: "В 2015 году один из вариантов алгоритма ГОСТ 28147-89 был опубликован под названием «Магма» как часть стандарта ГОСТ Р 34.12-2015, а позже как часть стандарта ГОСТ 34.12-2018. В описываемом алгоритме блок, подлежащий зашифровыванию (напомню, его длина 64 бита), разделяется на две равные по длине (32 бита) части — правую и левую. Далее выполняется тридцать две итерации с использованием итерационных ключей, получаемых из исходного 256-битного ключа шифрования. Во время каждой итерации (за исключением тридцать второй) с правой и левой половиной зашифровываемого блока производится одно преобразование, основанное на сети Фейстеля. Сначала правая часть складывается по модулю 32 с текущим итерационным ключом, затем полученное 32-битное число делится на восемь 4-битных и каждое из них с использованием таблицы перестановки преобразуется в другое 4-битное число (если помнишь, то в предыдущих двух статьях это называлось нелинейным биективным преобразованием). После этого преобразования полученное число циклически сдвигается влево на одиннадцать разрядов. Далее результат ксорится с левой половиной блока. Получившееся 32-битное число записывается в правую половину блока, а старое содержимое правой половины переносится в левую половину блока. В ходе последней (тридцать второй) итерации так же, как описано выше, преобразуется правая половина, после чего полученный результат пишется в левую часть исходного блока, а правая половина сохраняет свое значение. Итерационные ключи получаются из исходного 256-битного ключа. Исходный ключ делится на восемь 32-битных подключей, и далее они используются в следующем порядке: три раза с первого по восьмой и один раз с восьмого по первый.",
    aes: "AES — симметричный алгоритм блочного шифрования (размер блока 128 бит, ключ 128/192/256 бит), принятый в качестве стандарта шифрования правительством США по результатам конкурса AES.",
    grasshopper: "Алгоритм «Кузнечик» более современный и теоретически более стойкий, чем алгоритм «Магма». длина шифруемого блока в алгоритме «Кузнечик» — 128 бит. Длина ключа шифрования — 256 бит. Основу алгоритма составляет SP-сеть. В «Кузнечике» каждый раунд включает в себя линейное и нелинейное преобразование плюс операцию наложения так называемого итерационного ключа. Всего таких раундов девять и один последний неполный раунд, в котором выполняется только наложение последнего (десятого) итерационного ключа. Итерационные (или раундовые) ключи получаются путем определенных преобразований на основе мастер-ключа, длина которого, как мы уже знаем, составляет 256 бит. Этот процесс начинается с разбиения мастер-ключа пополам, так получается первая пара раундовых ключей. Для генерации каждой последующей пары раундовых ключей применяется восемь итераций сети Фейстеля, в каждой итерации используется константа, которая вычисляется путем применения линейного преобразования алгоритма к значению номера итерации.",
    rsa: "Шифрование и расшифрование текста осуществляется посимвольно по формулам Сi = MiE mod N и Mi = CiD mod N соответственно, где N = P*Q и D = (1 mod ф(N)) / E, где ф(N) = (P-1)*(Q-1).",
    elgamal: "Шифрование и расшифрование текста осуществляется посимвольно по формулам ai = g ki mod p, bi = y ki mod p и aix * Мi ≡ bi mod p соответственно, где p – больше простое число, g и x (1;p), y ≡ g x mod p и ki – рандомизаторы, взаимно простые с функцией Эйлера от числа p.",
    ecc: "Вводится текст (m) и ключ (k), для которого вычисляется R = [k]G и P = [k]DB = (x, y). Затем происходит посимвольное шифрование по формуле e = mix mod p. Шифртекстом является последовательность (R, e). Для расшифрования вычисляется Q = [CB]R = (x, y) и затем текст расшифровывается по формуле: m’ = ex-1 mod p.",
    gost94: "Суть алгоритма заключается в генерации случайных чисел p, q, a, x, k (< q) и вычислении значений r = (a k mod p) mod q и s = (x*r+k*(h(m))) mod q. Подпись представляет собой конкатенацию r и s.",
    gost12: "Формирование цифровой подписи выглядит следующим образом: вычисляется h – хэш-код сообщения, вычисляется e = z mod q, генерируется k (0;q), вычисляется точка С = [k]P и находится r = x mod q, после чего находится значение s = (r*d + k*e) mod q. Подпись представляет собой конкатенацию r и s.",
    rsaDigital: "Первой и наиболее известной во всем мире конкретной системой ЭЦП стала система RSА, математическая схема которой была разработана в 1977 г. в Массачуссетском технологическом институте США. Сначала необходимо вычислить пару ключей (секретный ключ и открытый ключ). Для этого отправитель (автор) электронных документов вычисляет два больших простых числа p и q, затем находит их произведение N = p * q и значение функции f(N) = (p - 1)(q - 1). Далее отправитель вычисляет число Е из условий: E <= f(N), НОД(Е, f(N)) = 1 и число D из условий: D < N, E*D сравнимо с единицей по модулю f(N). Пара чисел (Е, N) является открытым ключом.",
    elgamalDigital: "Для того чтобы генерировать пару ключей (открытый ключ - секретный ключ), сначала выбирают некоторое большое простое целое число Р и большое целое число G, причем G < Р. Отправитель выбирает случайное целое число X, 1 < Х <= (Р-1), и вычисляет Y =GX mod Р. Число Х является секретным ключом отправителя для подписывания документов и должно храниться в секрете. Для того чтобы подписать сообщение М, сначала отправитель хэширует его с помощью хэш-функции h() в целое число m: m = h(М), 1<m<(Р-1), и генерирует случайное целое число К, 1 < К < (Р -1), такое, что К и (Р-1) являются взаимно простыми. Затем отправитель вычисляет целое число а: а = GK mod Р и, применяя расширенный алгоритм Евклида, вычисляет с помощью секретного ключа Х целое число b из уравнения m = Х * а + К * b (mod (Р-1)). Пара чисел (а,b) образует цифровую подпись S.",
    diffieHellman: "В протоколе обмена секретными ключами\n" +
        "предполагается, что все пользователи знают некоторые числа n и a (1<\n" +
        "a < n). Для выработки общего секретного ключа пользователи A и B\n" +
        "должны проделать следующую процедуру:\n" +
        "1) Определить секретные ключи пользователей КА и КВ. Для этого\n" +
        "каждый пользователь независимо выбирает случайные числа из\n" +
        "интервала (2,..., n-1).\n" +
        "2) Вычислить открытые ключи пользователей YA и YB: Y=aK mod n.\n" +
        "3) Обменяться ключами YA и YB по открытому каналу связи.\n" +
        "4) Независимо определить общий секретный ключ К: K=YK mod n."
};
